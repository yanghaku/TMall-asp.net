@{
    ViewBag.Title = "编辑商品信息";
}

@model TMall.Models.ItemModel

<h2 class="text-center" style="margin-bottom: 15px;">商品编辑</h2>

<div class="row" id="editAPP">
    <div class="col-md-6">
        @using (Html.BeginForm("Edit", "Item", FormMethod.Post, new { @class = "form-horizontal", role = "form" })) {
            <div class="form-group" style="display: none">
                @Html.LabelFor(m => m.ItemId, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.ItemId, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ItemId)
                </div>
            </div>
            <div class="form-group" style="display: none">
                @Html.LabelFor(m => m.ItemCategoryId, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.ItemCategoryId, new { @class = "form-control", value = "{{nameToId}}" })
                    @Html.ValidationMessageFor(m => m.ItemCategoryId)
                </div>
            </div>
            <div class="form-group">
                <label for="ItemCategoryName" class="col-sm-2 control-label">商品分类</label>
                <div class="col-sm-10">
                    <select id="ItemCategoryName" class="form-control" v-model="nameToId">
                        @foreach (var c in TMall.Respository.Item.GetItemCategories()) {
                            <option value="@c.ItemCategoryId">@c.ItemCategoryName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ItemName, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.ItemName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ItemName)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ItemNumber, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.ItemNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ItemNumber)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ItemPrice, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.ItemPrice, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ItemPrice)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ItemSales, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.ItemSales, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ItemSales)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ItemPicture, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextBoxFor(m => m.ItemPicture, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ItemPicture)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ItemKeyword, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">
                    @Html.TextAreaFor(m => m.ItemKeyword, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ItemKeyword)
                </div>
            </div>
            <div class="form-group">
                @{ 
                    Dictionary<string, object> attr = new Dictionary<string, object>();
                    attr.Add("v-model", "inText");<!-- 绑定到vue-->
                    attr.Add("class", "form-control");
                }
                @Html.LabelFor(m => m.ItemText, new { @class = "control-label" })
                @Html.TextAreaFor(m => m.ItemText, 20, 50, attr)
                @Html.ValidationMessageFor(m => m.ItemText)
            </div>
            <div class="form-group">
                <div class="col-md-10 col-sm-10 col-md-offset-1 col-sm-offset-1">
                    <input type="submit" value="提交" class="btn btn-success btn-block" />
                </div>
            </div>
        }
    </div>
    <div class="col-md-6">
        <h4>具体参数预览:</h4>
        <div v-html="markedText" style="background-color:ghostwhite">
            <!-- 实时预览 -->
        </div>
    </div>

</div>

<script>
    var editAPP = new Vue({
        el: "#editAPP",
        data: {
            nameToId: null,
            markedText: null,
            inText: $("#ItemText").val(),//首先通过表单已经有的值初始化
        },
        mounted: function () { // 实例挂载后执行
            let v = $("#ItemCategoryId").val();
            if (v != null || v != undefined) this.nameToId = v;// 自动填入原先的分类
            if (this.inText !== null) this.markedText = marked(this.inText); // 如果inText已经初始化, 那么对应的输出就初始化
            let id = $("#ItemId").val();
            if (id == undefined || id == null || id == "") $("#ItemId").val(-1);// 如果未定义, 那就是新建商品, 就把id设为-1即可
        },
    });
    editAPP.$watch('nameToId', function (nval, oval) {// 监听商品名称的变化
        $("#ItemCategoryId").val(nval);// 名称变对应的id就变, 达到了直接输入的效果
    });
    editAPP.$watch('inText', function (nval, oval) {// 监听详细参数的输入框
        editAPP.markedText = marked(nval);
    });

</script>